console.log('#8. JavaScript homework example file')

/*
 * #1
 *
 * Задача: Створення та додавання DOM-елемента до вказаного контейнера
 * Мета: Розробити функцію createDomElement, яка приймає назву тега, текстовий вміст та контейнер, до якого потрібно додати новий елемент. Функція створює новий елемент з вказаним тегом та текстовим вмістом і додає цей елемент до заданого контейнера.
 *
 * Вимоги:
 * 1. Функція має приймати три параметри:
 *    - tagName - рядок, що вказує на назву тега нового елемента.
 *    - textContent - рядок, що вказує на текстовий вміст нового елемента.
 *    - container - DOM-елемент, до якого буде додано новий створений елемент.
 * 2. Функція має створити новий DOM-елемент з вказаним тегом і текстовим вмістом.
 * 3. Створений елемент має бути доданий до вказаного контейнера.
 * 4. Функція повертає посилання на створений елемент, що дозволяє подальшу взаємодію з ним.
 * 5. Функція має бути експортована для використання в інших модулях та тестування.
 */

function createDomElement(tagName, textContent, container) {
  // Створення нового DOM-елемента з вказаним тегом
  const newElement = document.createElement(tagName);
  
  // Додавання текстового вмісту до нового елемента
  newElement.textContent = textContent;
  
  // Додавання нового елемента до вказаного контейнера
  container.appendChild(newElement);
  
  // Повернення посилання на створений елемент
  return newElement;
}

// Демонстрація використання функції
const container = document.body; // В якості прикладу використовуємо body як контейнер
console.log(createDomElement('p', 'This paragraph has been added to the specified container.', container));


// Створення нового елемента: Використовується document.createElement(tagName) для створення нового елемента з вказаним тегом.
// одавання текстового вмісту: Властивість textContent використовується для встановлення тексту нового елемента.
// Додавання до контейнера: Метод appendChild додає створений елемент до зазначеного контейнера.
// Повернення елемента: Функція повертає посилання на створений елемент, що дозволяє подальшу взаємодію з ним.

// export { createDomElement }; - Цю функцію можна експортувати, якщо використовуємо модулі. У файлі, що підтримує ES6.




/*
 * #2
 *
 * Задача: Встановлення cookie з корисною інформацією на 10 секунд
 * Мета: Розробити функцію setUserInfoCookie, яка встановлює cookie з ім'ям userInfo та значенням у форматі "ключ=значення", яке зберігає корисну інформацію про користувача (наприклад, обрану мову інтерфейсу) та має термін дії 10 секунд. Значення cookie повинно бути відповідно закодовано для безпечного зберігання у веб-браузері.
 *
 * Вимоги до функції:
 *
 * 1. Функція приймає два аргументи: key (назва інформаційного параметра) та value (значення параметра).
 * 2. Функція кодує значення параметра для коректного зберігання у cookie.
 * 3. Функція встановлює cookie userInfo з закодованим значенням "ключ=значення" та встановлює термін його дії на 10 секунд.
 * 4. При встановленні cookie, функція виводить інформаційне повідомлення у консоль про успішне зберігання даних.
 */

// setUserInfoCookie.js

function setUserInfoCookie(key, value) {
  // Кодуємо значення параметра для коректного зберігання у cookie
  const encodedValue = encodeURIComponent(value);
  
  // Визначаємо термін дії cookie (10 секунд)
  const expirationTime = new Date(Date.now() + 10 * 1000).toUTCString();
  
  // Встановлюємо cookie з іменем userInfo
  document.cookie = `userInfo=${encodedValue}; expires=${expirationTime}; path=/`;
  
  // Виводимо повідомлення про успішне зберігання даних
  console.log(`Cookie збережено: userInfo=${key}=${value}`);
}

// Демонстрація використання функції
setUserInfoCookie('language', 'en');


// Кодування значення: Функція використовує encodeURIComponent для кодування значення, щоб забезпечити безпечне зберігання в cookie.
// Термін дії cookie: Термін дії встановлюється на 10 секунд за допомогою Date.now() і додається до поточного часу. Метод toUTCString() перетворює дату в правильний формат для cookie.
// Встановлення cookie: Формується рядок для cookie, в якому вказується ім'я, закодоване значення, термін дії та шлях (в даному випадку /, що означає доступність cookie на всьому сайті).
// Консольне повідомлення: Виводиться інформація про успішне зберігання даних.





/*
 * #3
 *
 * Задача: Робота з sessionStorage для зберігання та отримання даних користувача
 * Мета: Створити дві функції, saveUserInfo і getUserInfo, для взаємодії з sessionStorage. Перша функція повинна зберігати інформацію про користувача, а друга - отримувати її. Крім того, обидві функції повинні виводити відповідні повідомлення у консоль про успішне збереження або отримання даних.
 *
 * Вимоги до saveUserInfo:
 *
 * 1. Функція приймає два параметри: ключ (key) та значення (value).
 * 2. Зберігає пару ключ-значення в sessionStorage.
 * 3. Виводить у консоль повідомлення формату "Saved key: value".
 *
 * Вимоги до getUserInfo:
 *
 * 1. Функція приймає один параметр: ключ (key).
 * 2. Отримує значення за вказаним ключем з sessionStorage.
 * 3. Виводить у консоль повідомлення формату "Retrieved key: value", де value - це значення, отримане з sessionStorage.
 * 4. Повертає значення отримане з sessionStorage.
 */


function saveUserInfo(key, value) {
  // Зберігаємо пару ключ-значення в sessionStorage
  sessionStorage.setItem(key, value);
  
  // Виводимо у консоль повідомлення про успішне збереження
  console.log(`Saved ${key}: ${value}`);
}

function getUserInfo(key) {
  // Отримуємо значення за вказаним ключем з sessionStorage
  const value = sessionStorage.getItem(key);
  
  // Виводимо у консоль повідомлення про успішне отримання
  if (value !== null) {
    console.log(`Retrieved ${key}: ${value}`);
  } else {
    console.log(`No value found for key: ${key}`);
  }
  
  // Повертаємо отримане значення
  return value;
}

// Демонстрація використання функцій
saveUserInfo('username', 'JohnDoe');
console.log(getUserInfo('username')); // Виведе: JohnDoe

// Експорт функцій для використання в інших модулях
export { saveUserInfo, getUserInfo };

export { createDomElement, setUserInfoCookie, saveUserInfo, getUserInfo }

// 1. Функція saveUserInfo:
// Приймає два параметри: key (ключ) і value (значення).
// Використовує sessionStorage.setItem() для зберігання пари ключ-значення.
// Виводить у консоль повідомлення, яке підтверджує успішне збереження.

// 2. Функція getUserInfo:
// Приймає один параметр: key.
// Використовує sessionStorage.getItem() для отримання значення за вказаним ключем.
// Виводить у консоль повідомлення про отримане значення або про відсутність значення за вказаним ключем.
// Повертає отримане значення.
// Ці функції дозволяють зручно зберігати та отримувати дані в sessionStorage, що є особливо корисним для зберігання інформації на час сесії.
